# Generated by Django 4.2.7 on 2025-10-17 11:13

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AgentTask',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('agent_name', models.CharField(max_length=100)),
                ('task_type', models.CharField(max_length=50)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('running', 'Running'), ('completed', 'Completed'), ('failed', 'Failed')], default='pending', max_length=20)),
                ('input_data', models.JSONField(blank=True, default=dict)),
                ('output_data', models.JSONField(blank=True, default=dict)),
                ('error_message', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AIAnalysisResult',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('analysis_type', models.CharField(choices=[('combined', 'Combined Analysis'), ('summary', 'Summary Only'), ('sentiment', 'Sentiment Analysis'), ('tags', 'Tags Analysis')], db_index=True, default='combined', help_text='Type of AI analysis performed', max_length=50)),
                ('days_analyzed', models.PositiveIntegerField(default=30, help_text='Number of days of data analyzed')),
                ('date_range_start', models.DateField(help_text='Start date of analysis period')),
                ('date_range_end', models.DateField(help_text='End date of analysis period')),
                ('total_reviews_analyzed', models.PositiveIntegerField(help_text='Number of reviews analyzed')),
                ('summary_data', models.JSONField(default=dict, help_text='AI-generated summary and insights')),
                ('sentiment_analysis', models.JSONField(default=dict, help_text='Sentiment analysis results and distribution')),
                ('tags_analysis', models.JSONField(default=dict, help_text='Tags, keywords, and topic analysis')),
                ('recommendations', models.JSONField(default=list, help_text='AI-generated recommendations')),
                ('agents_used', models.JSONField(default=dict, help_text='Information about AI agents used in analysis')),
                ('workflow_info', models.JSONField(default=dict, help_text='Workflow and processing information')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True, help_text='Whether this analysis is the current active one')),
            ],
            options={
                'verbose_name': 'AI Analysis Result',
                'verbose_name_plural': 'AI Analysis Results',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Hotel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=200)),
                ('location', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('website_url', models.URLField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ReviewSource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('website_url', models.URLField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ReviewBatch',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('file_name', models.CharField(max_length=255)),
                ('file_size', models.PositiveIntegerField(default=0, help_text='File size in bytes')),
                ('total_reviews', models.PositiveIntegerField(default=0)),
                ('processed_reviews', models.PositiveIntegerField(default=0)),
                ('failed_reviews', models.PositiveIntegerField(default=0)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed')], default='pending', max_length=20)),
                ('error_message', models.TextField(blank=True)),
                ('upload_date', models.DateTimeField(auto_now_add=True)),
                ('processing_started', models.DateTimeField(blank=True, null=True)),
                ('processing_completed', models.DateTimeField(blank=True, null=True)),
                ('uploaded_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-upload_date'],
            },
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('text', models.TextField()),
                ('title', models.CharField(blank=True, max_length=200)),
                ('original_rating', models.FloatField(blank=True, help_text='Original rating from review platform (0-5 scale)', null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(5.0)])),
                ('reviewer_name', models.CharField(blank=True, max_length=100)),
                ('reviewer_location', models.CharField(blank=True, max_length=100)),
                ('date_posted', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('date_stayed', models.DateField(blank=True, null=True)),
                ('sentiment', models.CharField(choices=[('positive', 'Positive'), ('neutral', 'Neutral'), ('negative', 'Negative')], db_index=True, default='neutral', max_length=10)),
                ('ai_score', models.FloatField(default=3.0, help_text='AI-generated sentiment score (0-5 scale)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(5.0)])),
                ('confidence_score', models.FloatField(default=0.5, help_text='AI confidence in analysis (0-1 scale)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('ai_keywords', models.JSONField(blank=True, default=list, help_text='AI-extracted keywords from review text')),
                ('ai_topics', models.JSONField(blank=True, default=dict, help_text='AI-identified topics and their relevance scores')),
                ('ai_summary', models.TextField(blank=True, help_text='AI-generated summary of the review')),
                ('processed', models.BooleanField(db_index=True, default=False)),
                ('processing_error', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('hotel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='reviews.hotel')),
                ('source', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='reviews.reviewsource')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='hotel',
            index=models.Index(fields=['name'], name='reviews_hot_name_cae81b_idx'),
        ),
        migrations.AddIndex(
            model_name='hotel',
            index=models.Index(fields=['location'], name='reviews_hot_locatio_84b749_idx'),
        ),
        migrations.AddConstraint(
            model_name='hotel',
            constraint=models.UniqueConstraint(fields=('name', 'location'), name='unique_hotel_location'),
        ),
        migrations.AddField(
            model_name='aianalysisresult',
            name='hotel',
            field=models.ForeignKey(blank=True, help_text='Specific hotel analyzed (null for all hotels)', null=True, on_delete=django.db.models.deletion.CASCADE, to='reviews.hotel'),
        ),
        migrations.AddIndex(
            model_name='agenttask',
            index=models.Index(fields=['status', 'created_at'], name='reviews_age_status_b0a7b5_idx'),
        ),
        migrations.AddIndex(
            model_name='agenttask',
            index=models.Index(fields=['agent_name', 'created_at'], name='reviews_age_agent_n_0e0265_idx'),
        ),
        migrations.AddIndex(
            model_name='reviewbatch',
            index=models.Index(fields=['status', 'upload_date'], name='reviews_rev_status_4b03d7_idx'),
        ),
        migrations.AddIndex(
            model_name='reviewbatch',
            index=models.Index(fields=['uploaded_by', 'upload_date'], name='reviews_rev_uploade_5eda37_idx'),
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['sentiment', 'ai_score'], name='reviews_rev_sentime_171749_idx'),
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['hotel', 'sentiment'], name='reviews_rev_hotel_i_cc4517_idx'),
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['date_posted', 'sentiment'], name='reviews_rev_date_po_23efd0_idx'),
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['processed', 'created_at'], name='reviews_rev_process_4db0eb_idx'),
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['hotel', 'date_posted'], name='reviews_rev_hotel_i_ea04da_idx'),
        ),
        migrations.AddConstraint(
            model_name='review',
            constraint=models.CheckConstraint(check=models.Q(('ai_score__gte', 0.0), ('ai_score__lte', 5.0)), name='valid_ai_score_range'),
        ),
        migrations.AddConstraint(
            model_name='review',
            constraint=models.CheckConstraint(check=models.Q(('confidence_score__gte', 0.0), ('confidence_score__lte', 1.0)), name='valid_confidence_range'),
        ),
        migrations.AddIndex(
            model_name='aianalysisresult',
            index=models.Index(fields=['analysis_type', 'created_at'], name='reviews_aia_analysi_ba4b02_idx'),
        ),
        migrations.AddIndex(
            model_name='aianalysisresult',
            index=models.Index(fields=['hotel', 'created_at'], name='reviews_aia_hotel_i_3d43a8_idx'),
        ),
        migrations.AddIndex(
            model_name='aianalysisresult',
            index=models.Index(fields=['is_active', 'analysis_type'], name='reviews_aia_is_acti_1167c7_idx'),
        ),
        migrations.AddIndex(
            model_name='aianalysisresult',
            index=models.Index(fields=['date_range_start', 'date_range_end'], name='reviews_aia_date_ra_f11da2_idx'),
        ),
        migrations.AddConstraint(
            model_name='aianalysisresult',
            constraint=models.CheckConstraint(check=models.Q(('days_analyzed__gte', 1), ('days_analyzed__lte', 365)), name='valid_days_analyzed_range'),
        ),
        migrations.AddConstraint(
            model_name='aianalysisresult',
            constraint=models.CheckConstraint(check=models.Q(('total_reviews_analyzed__gte', 0)), name='valid_reviews_count'),
        ),
    ]
